#!/bin/bash
#--------------------------------------------------------------------------
# Code generated by the SmartSoft MDSD Toolchain
# The SmartSoft Toolchain has been developed by:
#  
# Service Robotics Research Center
# University of Applied Sciences Ulm
# Prittwitzstr. 10
# 89075 Ulm (Germany)
#
# Information about the SmartSoft MDSD Toolchain is available at:
# www.servicerobotik-ulm.de
#
# Please do not modify this file. It will be re-generated
# running the code generator.
#--------------------------------------------------------------------------
#
# run this script from the component's root folder to deploy the scenario to device.
#

TARGET_SSHUSER=
TARGET_IP=localhost
TARGET_DIRECTORY="/tmp"
DEPLOYMENT_DIRECTORY=SystemRealSense3dReconstruction.deployment/

echo "#######################################################"
echo "## Deployment of Device PC1 / $TARGET_IP"
echo "#######################################################"
echo "Target SSH user:      $TARGET_SSHUSER"
echo "Target IP:            $TARGET_IP"
echo "Target directory:     $TARGET_DIRECTORY"
echo "Deployment directory: $DEPLOYMENT_DIRECTORY"

echo "Working directory of deployment script: "`pwd`

echo Sourcing referenced projects
source src-gen/deployment/referenced-projects

DEPLOY_LIBRARIES_USER=""
###############################
echo "Sourcing pre-deployment script for Component3dReconstruction... (errors might be ignored)"
DEPLOY_LIBRARIES=""
DEPLOY_COMPONENT_FILES=""
source src/predeploy-Component3dReconstruction.sh 2>&1

for I in $DEPLOY_LIBRARIES; do
	if [ -e "$SMART_ROOT_ACE/bin/$I" ]; then
		FILE="$SMART_ROOT_ACE/bin/$I"
	else
		FILE="$SMART_ROOT_ACE/lib/$I"
	fi
	DEPLOY_LIBRARIES_USER="$DEPLOY_LIBRARIES_USER $FILE"
done

DEPLOY_COMPONENT_FILES_PATHS_Component3dReconstruction=""
for I in $DEPLOY_COMPONENT_FILES; do
	if ls $REFERENCED_PROJECT_Component3dReconstruction/$I > /dev/null 2>&1; then
		DEPLOY_COMPONENT_FILES_PATHS_Component3dReconstruction="$DEPLOY_COMPONENT_FILES_PATHS_Component3dReconstruction $REFERENCED_PROJECT_Component3dReconstruction/$I"
	elif ls $I > /dev/null 2>&1; then
		DEPLOY_COMPONENT_FILES_PATHS_Component3dReconstruction="$DEPLOY_COMPONENT_FILES_PATHS_Component3dReconstruction $I"
	fi
done

#########################
## BEHAVIOR FILES
shopt -u | grep -q nullglob && changed=true && shopt -s nullglob
for entry in "$REFERENCED_PROJECT_Component3dReconstruction"/model/*.smartTcl
do
  DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_Component3dReconstruction="$DEPLOY_COMPONENT_TCL_MODEL_FILES_Component3dReconstruction $entry"
done
[ $changed ] && shopt -u nullglob; unset changed

echo "$DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_Component3dReconstruction "
#########################

echo
###############################
 
###############################
echo "Sourcing pre-deployment script for ComponentRealSenseV2Server... (errors might be ignored)"
DEPLOY_LIBRARIES=""
DEPLOY_COMPONENT_FILES=""
source src/predeploy-ComponentRealSenseV2Server.sh 2>&1

for I in $DEPLOY_LIBRARIES; do
	if [ -e "$SMART_ROOT_ACE/bin/$I" ]; then
		FILE="$SMART_ROOT_ACE/bin/$I"
	else
		FILE="$SMART_ROOT_ACE/lib/$I"
	fi
	DEPLOY_LIBRARIES_USER="$DEPLOY_LIBRARIES_USER $FILE"
done

DEPLOY_COMPONENT_FILES_PATHS_ComponentRealSenseV2Server=""
for I in $DEPLOY_COMPONENT_FILES; do
	if ls $REFERENCED_PROJECT_ComponentRealSenseV2Server/$I > /dev/null 2>&1; then
		DEPLOY_COMPONENT_FILES_PATHS_ComponentRealSenseV2Server="$DEPLOY_COMPONENT_FILES_PATHS_ComponentRealSenseV2Server $REFERENCED_PROJECT_ComponentRealSenseV2Server/$I"
	elif ls $I > /dev/null 2>&1; then
		DEPLOY_COMPONENT_FILES_PATHS_ComponentRealSenseV2Server="$DEPLOY_COMPONENT_FILES_PATHS_ComponentRealSenseV2Server $I"
	fi
done

#########################
## BEHAVIOR FILES
shopt -u | grep -q nullglob && changed=true && shopt -s nullglob
for entry in "$REFERENCED_PROJECT_ComponentRealSenseV2Server"/model/*.smartTcl
do
  DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_ComponentRealSenseV2Server="$DEPLOY_COMPONENT_TCL_MODEL_FILES_ComponentRealSenseV2Server $entry"
done
[ $changed ] && shopt -u nullglob; unset changed

echo "$DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_ComponentRealSenseV2Server "
#########################

echo
###############################
 
###############################
echo "Sourcing pre-deployment script for ComponentVisualization... (errors might be ignored)"
DEPLOY_LIBRARIES=""
DEPLOY_COMPONENT_FILES=""
source src/predeploy-ComponentVisualization.sh 2>&1

for I in $DEPLOY_LIBRARIES; do
	if [ -e "$SMART_ROOT_ACE/bin/$I" ]; then
		FILE="$SMART_ROOT_ACE/bin/$I"
	else
		FILE="$SMART_ROOT_ACE/lib/$I"
	fi
	DEPLOY_LIBRARIES_USER="$DEPLOY_LIBRARIES_USER $FILE"
done

DEPLOY_COMPONENT_FILES_PATHS_ComponentVisualization=""
for I in $DEPLOY_COMPONENT_FILES; do
	if ls $REFERENCED_PROJECT_ComponentVisualization/$I > /dev/null 2>&1; then
		DEPLOY_COMPONENT_FILES_PATHS_ComponentVisualization="$DEPLOY_COMPONENT_FILES_PATHS_ComponentVisualization $REFERENCED_PROJECT_ComponentVisualization/$I"
	elif ls $I > /dev/null 2>&1; then
		DEPLOY_COMPONENT_FILES_PATHS_ComponentVisualization="$DEPLOY_COMPONENT_FILES_PATHS_ComponentVisualization $I"
	fi
done

#########################
## BEHAVIOR FILES
shopt -u | grep -q nullglob && changed=true && shopt -s nullglob
for entry in "$REFERENCED_PROJECT_ComponentVisualization"/model/*.smartTcl
do
  DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_ComponentVisualization="$DEPLOY_COMPONENT_TCL_MODEL_FILES_ComponentVisualization $entry"
done
[ $changed ] && shopt -u nullglob; unset changed

echo "$DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_ComponentVisualization "
#########################

echo
###############################
 


DEPL_FILES="
$SMART_ROOT_ACE/lib/libAceSmartSoftKernel.so.*
$SMART_ROOT_ACE/lib/libSmartProperty.so.*
src-gen/deployment/tiler.sh
src-gen/deployment/start-PC1.sh
$SMART_ROOT_ACE/bin/NamingService
src-gen/deployment/ns_config.ini
src/Component3dReconstruction_data
src/startstop-hooks-Component3dReconstruction.sh
$SMART_ROOT_ACE/bin/Component3dReconstruction
src-gen/combined-ini-files/Component3dReconstruction.ini
$SMART_ROOT_ACE/lib/libCommManipulatorObjects.so*
$SMART_ROOT_ACE/lib/libDomainVision.so*
src/ComponentRealSenseV2Server_data
src/startstop-hooks-ComponentRealSenseV2Server.sh
$SMART_ROOT_ACE/bin/ComponentRealSenseV2Server
src-gen/combined-ini-files/ComponentRealSenseV2Server.ini
$SMART_ROOT_ACE/lib/libCommBasicObjects.so*
$SMART_ROOT_ACE/lib/libCommManipulatorObjects.so*
$SMART_ROOT_ACE/lib/libDomainVision.so*
src/ComponentVisualization_data
src/startstop-hooks-ComponentVisualization.sh
$SMART_ROOT_ACE/bin/ComponentVisualization
src-gen/combined-ini-files/ComponentVisualization.ini
$SMART_ROOT_ACE/lib/libCommBasicObjects.so*
$SMART_ROOT_ACE/lib/libCommNavigationObjects.so*
$SMART_ROOT_ACE/lib/libCommTrackingObjects.so*
$SMART_ROOT_ACE/lib/libDomainVision.so*

$DEPLOY_LIBRARIES_USER
"

FILES_MISSING=false
for FILE in $DEPL_FILES; do
	if [ ! -e $FILE ]; then
		echo "Deployment: No such file or directory: $FILE"
		FILES_MISSING=true
	fi
done

if [ "$FILES_MISSING" = "true" ]; then
	echo
	echo "ERROR: FILES ARE MISSING FROM THE DEPLOYMENT (see above). Did you compile all components?"
	echo 
	exit 1
fi


if [ "$1" = "local" ]; then
	# local deployment
	mkdir -p $DEPLOYMENT_DIRECTORY
	rsync -l -r -v --progress --exclude ".svn" $DEPL_FILES $DEPLOYMENT_DIRECTORY/PC1
else
	# remote deployment
	SSH_TARGET=localhost:$TARGET_DIRECTORY/$DEPLOYMENT_DIRECTORY
	echo "Deployment to $SSH_TARGET"
	ssh localhost mkdir -p $TARGET_DIRECTORY/$DEPLOYMENT_DIRECTORY
	
	TMPDIR=$(mktemp -d --suffix=.deployment) || exit 1
	echo "Temporary directory: $TMPDIR"
	mkdir $TMPDIR/behaviorFiles
	trap "rm -rf $TMPDIR" EXIT
	
	# collect files in $TMPDIR
	#rsync -l -r -v --progress --exclude ".svn" $DEPL_FILES $TMPDIR/
	cp -rv $DEPL_FILES $TMPDIR 2>&1
#rsync -l -r -v --progress --exclude ".svn" $DEPLOY_COMPONENT_FILES_PATHS_Component3dReconstruction $TMPDIR/Component3dReconstruction_data/
if [ ! "$DEPLOY_COMPONENT_FILES_PATHS_Component3dReconstruction" = "" ]; then
	cp -rv $DEPLOY_COMPONENT_FILES_PATHS_Component3dReconstruction $TMPDIR/Component3dReconstruction_data/ 2>&1
fi

if [ ! "$DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_Component3dReconstruction" = "" ]; then
	cp -rv $DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_Component3dReconstruction $TMPDIR/behaviorFiles/ 2>&1
fi

cp -v $REFERENCED_PROJECT_Component3dReconstruction/smartsoft/src/startstop-hooks.sh $TMPDIR/startstop-hooks-component-Component3dReconstruction.sh 2>/dev/null
#rsync -l -r -v --progress --exclude ".svn" $DEPLOY_COMPONENT_FILES_PATHS_ComponentRealSenseV2Server $TMPDIR/ComponentRealSenseV2Server_data/
if [ ! "$DEPLOY_COMPONENT_FILES_PATHS_ComponentRealSenseV2Server" = "" ]; then
	cp -rv $DEPLOY_COMPONENT_FILES_PATHS_ComponentRealSenseV2Server $TMPDIR/ComponentRealSenseV2Server_data/ 2>&1
fi

if [ ! "$DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_ComponentRealSenseV2Server" = "" ]; then
	cp -rv $DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_ComponentRealSenseV2Server $TMPDIR/behaviorFiles/ 2>&1
fi

cp -v $REFERENCED_PROJECT_ComponentRealSenseV2Server/smartsoft/src/startstop-hooks.sh $TMPDIR/startstop-hooks-component-ComponentRealSenseV2Server.sh 2>/dev/null
#rsync -l -r -v --progress --exclude ".svn" $DEPLOY_COMPONENT_FILES_PATHS_ComponentVisualization $TMPDIR/ComponentVisualization_data/
if [ ! "$DEPLOY_COMPONENT_FILES_PATHS_ComponentVisualization" = "" ]; then
	cp -rv $DEPLOY_COMPONENT_FILES_PATHS_ComponentVisualization $TMPDIR/ComponentVisualization_data/ 2>&1
fi

if [ ! "$DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_ComponentVisualization" = "" ]; then
	cp -rv $DEPLOY_COMPONENT_BEHAVIOR_MODEL_FILES_ComponentVisualization $TMPDIR/behaviorFiles/ 2>&1
fi

cp -v $REFERENCED_PROJECT_ComponentVisualization/smartsoft/src/startstop-hooks.sh $TMPDIR/startstop-hooks-component-ComponentVisualization.sh 2>/dev/null
	
	#collect and copy behavior related files
	echo "Sourcing behavior files..."
	test -f src-gen/deployment/deploy-behavior-files.sh && source src-gen/deployment/deploy-behavior-files.sh
	
	# actually deploy:
	rsync -z -l -r -v --progress --exclude ".svn" -e ssh $TMPDIR/ $SSH_TARGET
fi


if [ "$?" != "0" ]; then
	echo "ERROR: Files could not be deployed to remote host."
	#gdialog --title ERROR --msgbox "Files could not be deployed host."
	exit 1
fi

echo -e "\n\nDeployment to device PC1 finished.\n\n"

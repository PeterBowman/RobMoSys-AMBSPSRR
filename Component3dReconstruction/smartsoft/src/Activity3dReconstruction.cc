//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "Activity3dReconstruction.hh"
#include "Component3dReconstruction.hh"

#include <iostream>

Activity3dReconstruction::Activity3dReconstruction(SmartACE::SmartComponent *comp) 
:	Activity3dReconstructionCore(comp)
{
	std::cout << "constructor Activity3dReconstruction\n";
}
Activity3dReconstruction::~Activity3dReconstruction() 
{
	std::cout << "destructor Activity3dReconstruction\n";
}


int Activity3dReconstruction::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further

	return 0;
}
int Activity3dReconstruction::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;

	DomainVision::CommDepthImage depthImageIn;
	status = COMP->depthImagePushServiceIn->getUpdate(depthImageIn);

	if (status == Smart::StatusCode::SMART_OK)
	{
		if (COMP->kinfu == nullptr)
		{
			int width = depthImageIn.getWidth();
			int height = depthImageIn.getHeight();
			auto intrinsic = depthImageIn.get_intrinsic();

			COMP->params->frameSize = cv::Size(width, height);

			COMP->params->intr = cv::Matx33f(
					intrinsic(0, 0), intrinsic(0, 1), intrinsic(0, 2),
					intrinsic(1, 0), intrinsic(1, 1), intrinsic(1, 2),
					intrinsic(2, 0), intrinsic(2, 1), intrinsic(2, 2));

			COMP->kinfu = cv::kinfu::KinFu::create(COMP->params);
		}

		cv::Mat depth(depthImageIn.getHeight(), depthImageIn.getWidth(), CV_32FC1, depthImageIn.getDataRef().data());

		if (!COMP->kinfu->update(depth))
		{
			std::cout << "kinfu reset\n";
			COMP->kinfu->reset();
		}

		status = COMP->stateSlave->tryAcquire("pushimage");

		if (status == Smart::StatusCode::SMART_OK)
		{
			cv::Mat rendered;
			COMP->kinfu->render(rendered);

			cv::Mat points;
			COMP->kinfu->getPoints(points);

			DomainVision::CommVideoImage rgbImageOut(rendered.rows, rendered.cols, DomainVision::FormatType::RGB32, rendered.data);
			status = COMP->rGBImagePushServiceOut->put(rgbImageOut);

			DomainVision::Comm3dPointCloud pointCloudOut;
			Component3dReconstruction::fromCvMat(points, pointCloudOut);
			status = COMP->pointCloudPushServiceOut->put(pointCloudOut);
		}
	}

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}

int Activity3dReconstruction::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}
